#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <ctime>
#include <random>
#include <sstream>

using namespace std;

// Lớp UserAccount để quản lý thông tin tài khoản người dùng
class UserAccount {
public:
    string username;
    string hashedPassword; // Giả lập hash bằng cách thêm chuỗi "_hashed"
    string fullName;
    string email;
    string phoneNumber;
    string userID;
    bool isAdmin;
    double walletBalance; // Số dư ví
    bool isAutoGenerated; // Mật khẩu tự sinh hay không

    UserAccount(string u, string p, string f, string e, string ph, string id, bool admin = false) {
        username = u;
        hashedPassword = p + "_hashed"; // Giả lập hash
        fullName = f;
        email = e;
        phoneNumber = ph;
        userID = id;
        isAdmin = admin;
        walletBalance = 0.0;
        isAutoGenerated = false;
    }
};

// Lớp Transaction để quản lý giao dịch
class Transaction {
public:
    string transactionID;
    string fromWalletID;
    string toWalletID;
    double amount;
    string timestamp;
    bool status;

    Transaction(string tID, string from, string to, double amt) {
        transactionID = tID;
        fromWalletID = from;
        toWalletID = to;
        amount = amt;
        time_t now = time(0);
        timestamp = ctime(&now);
        status = false; // Chưa hoàn tất
    }
};

// Hàm sinh ID ngẫu nhiên
string generateID() {
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> dis(1000, 9999);
    return "ID" + to_string(dis(gen));
}

// Hàm sinh mật khẩu tự động
string generatePassword() {
    string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%";
    string password;
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> dis(0, chars.size() - 1);
    for (int i = 0; i < 10; i++) {
        password += chars[dis(gen)];
    }
    return password;
}

// Hàm lưu trữ tài khoản vào file
void saveUserToFile(const UserAccount& user) {
    ofstream file("users.txt", ios::app);
    if (file.is_open()) {
        file << user.username << "," << user.hashedPassword << "," << user.fullName << ","
             << user.email << "," << user.phoneNumber << "," << user.userID << ","
             << (user.isAdmin ? "1" : "0") << "," << user.walletBalance << ","
             << (user.isAutoGenerated ? "1" : "0") << "\n";
        file.close();
    } else {
        cout << "Loi mo file!" << endl;
    }
}

// Hàm kiểm tra đăng nhập
UserAccount* login(vector<UserAccount>& users, string username, string password) {
    for (auto& user : users) {
        if (user.username == username && user.hashedPassword == (password + "_hashed")) {
            if (user.isAutoGenerated) {
                cout << "Mat khau tu sinh. Vui long doi mat khau moi!" << endl;
            }
            return &user;
        }
    }
    return nullptr;
}

// Hàm thay đổi mật khẩu
void changePassword(UserAccount& user, string newPassword) {
    user.hashedPassword = newPassword + "_hashed";
    user.isAutoGenerated = false;
    cout << "Doi mat khau thanh cong!" << endl;
}

// Hàm sinh OTP (giả lập)
string generateOTP() {
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> dis(100000, 999999);
    return to_string(dis(gen));
}

// Hàm xác thực OTP (giả lập)
bool verifyOTP(string inputOTP) {
    string otp = generateOTP();
    cout << "Ma OTP (gia lap): " << otp << endl;
    return inputOTP == otp;
}

// Hàm chuyển điểm giữa các ví
bool transferPoints(vector<UserAccount>& users, string fromID, string toID, double amount) {
    UserAccount* fromUser = nullptr;
    UserAccount* toUser = nullptr;

    // Tìm ví nguồn và đích
    for (auto& user : users) {
        if (user.userID == fromID) fromUser = &user;
        if (user.userID == toID) toUser = &user;
    }

    if (!fromUser || !toUser) {
        cout << "Khong tim thay vi!" << endl;
        return false;
    }

    // Xác thực OTP
    string inputOTP;
    cout << "Nhap ma OTP de xac nhan giao dich: ";
    cin >> inputOTP;
    if (!verifyOTP(inputOTP)) {
        cout << "OTP khong hop le!" << endl;
        return false;
    }

    // Giao dịch atomic
    if (fromUser->walletBalance >= amount) {
        fromUser->walletBalance -= amount;
        toUser->walletBalance += amount;

        // Ghi log giao dịch
        Transaction tx(generateID(), fromID, toID, amount);
        tx.status = true;
        cout << "Giao dich thanh cong: " << tx.transactionID << " luc " << tx.timestamp;
        return true;
    } else {
        cout << "So du khong du!" << endl;
        return false;
    }
}

// Hàm main
int main() {
    vector<UserAccount> users;

    // Tạo tài khoản quản lý
    UserAccount admin("admin", "admin123", "Quan Ly", "admin@example.com", "0123456789", generateID(), true);
    saveUserToFile(admin);
    users.push_back(admin);

    int choice;
    do {
        cout << "\n1. Dang ky tai khoan\n2. Dang nhap\n3. Chuyen diem\n4. Thoat\nChon: ";
        cin >> choice;

        switch (choice) {
        case 1: { // Đăng ký tài khoản
            string username, password, fullName, email, phoneNumber;
            cout << "Nhap ten dang nhap: "; cin >> username;
            cout << "Nhap mat khau (hoac de trong de tu sinh): "; cin.ignore(); getline(cin, password);
            if (password.empty()) {
                password = generatePassword();
                cout << "Mat khau tu sinh: " << password << endl;
            }
            cout << "Nhap ho ten: "; getline(cin, fullName);
            cout << "Nhap email: "; cin >> email;
            cout << "Nhap so dien thoai: "; cin >> phoneNumber;

            UserAccount user(username, password, fullName, email, phoneNumber, generateID());
            user.isAutoGenerated = password.empty();
            saveUserToFile(user);
            users.push_back(user);
            cout << "Dang ky thanh cong! Ma tai khoan: " << user.userID << endl;
            break;
        }
        case 2: { // Đăng nhập
            string username, password;
            cout << "Nhap ten dang nhap: "; cin >> username;
            cout << "Nhap mat khau: "; cin >> password;

            UserAccount* loggedInUser = login(users, username, password);
            if (loggedInUser) {
                cout << "Dang nhap thanh cong! Xin chao " << loggedInUser->fullName << endl;
                if (loggedInUser->isAutoGenerated) {
                    string newPassword;
                    cout << "Nhap mat khau moi: "; cin >> newPassword;
                    changePassword(*loggedInUser, newPassword);
                }
            } else {
                cout << "Dang nhap that bai!" << endl;
            }
            break;
        }
        case 3: { // Chuyển điểm
            string fromID, toID;
            double amount;
            cout << "Nhap ma vi nguon: "; cin >> fromID;
            cout << "Nhap ma vi dich: "; cin >> toID;
            cout << "Nhap so diem: "; cin >> amount;
            transferPoints(users, fromID, toID, amount);
            break;
        }
        case 4:
            cout << "Thoat chuong trinh!" << endl;
            break;
        default:
            cout << "Lua chon khong hop le!" << endl;
        }
    } while (choice != 4);

    return 0;
}